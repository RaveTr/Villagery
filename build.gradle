buildscript {
	repositories {
		maven { url = "https://maven.minecraftforge.net/" }
		maven { url = 'https://maven.parchmentmc.org' }
		maven { url = "https://repo.spongepowered.org/maven" }
		mavenCentral()
	}
	dependencies {
		classpath(group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true)
		classpath 'org.parchmentmc:librarian:1.+'
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
	}
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: "org.spongepowered.mixin"
apply plugin: "eclipse"
apply plugin: "maven-publish"

version = "${mcVersion}-${modVersion}"
group = project.projectGroup 
archivesBaseName = project.modId

java.toolchain.languageVersion = JavaLanguageVersion.of 17

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${parchmentMappingsVersion}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=villagery.mixins.json"
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                villagery {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=villagery.mixins.json"
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                villagery {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            arg "-mixin.config=villagery.mixins.json"
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                villagery {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=villagery.mixins.json"
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'villagery', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                villagery {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
	add sourceSets.main, 'villagery.refmap.json'
	config 'villagery.mixins.json'

	debug.export = true
}

repositories {
	maven { 
	    name = "Shedaniel Maven"
	    url "https://maven.shedaniel.me/" 
	}
	maven {
	    name = "Architectury Maven"
	    url "https://maven.architectury.dev/" 
	}
	maven {
		name = "GeckoLib"
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
	}
	maven {
        name "KosmX Maven"
        url 'https://maven.kosmx.dev/'
    }
    maven {
        name = "Modrinth Mavin"
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
		url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
	}
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${fmlVersion}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    
//  implementation  fg.deobf("software.bernie.geckolib:geckolib-forge-${mcVersion}:${geckolib}")
    implementation  fg.deobf("curse.maven:smartbrainlib-661293:${sbl}-sources-${sblSource}")
    
    implementation  fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei}")
//  implementation  fg.deobf("curse.maven:roughly-enough-resources-325625:${rer}")
    
    implementation  fg.deobf("me.shedaniel.cloth:cloth-config-forge:${clothConfig}")
    implementation  fg.deobf("dev.architectury:architectury-forge:${architectury}")
//  implementation  fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${playerAnimator}")

    implementation  fg.deobf("curse.maven:appleskin-248787:${appleskin}")

	implementation  fg.deobf("curse.maven:configured-457570:${configured}")
	implementation  fg.deobf("curse.maven:catalogue-459701:${catalogue}")

	implementation  fg.deobf("curse.maven:the-one-probe-245211:${top}")
	implementation  fg.deobf("curse.maven:jade-324717:${jade}")
	
//	implementation  fg.deobf("maven.modrinth:better-combat:${betterCombat}-forge")
//	implementation  fg.deobf("maven.modrinth:combat-roll:${combatRoll}-forge")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.modName,
                "Specification-Vendor"    : "MnK", // Meme Man Donkoki
                "Specification-Version"   : "1", 
                "Implementation-Title"    : "${modName}",
                "Implementation-Version"  : project.modVersion,
                "Implementation-Vendor"   : "MnK",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "villagery.mixins.json"
        ])
    }
}

processResources {
	exclude '**/.cache/'

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' 
}
